import os
import psycopg2
import psycopg2.extras

from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()

async def db_connection():
    return psycopg2.connect(
        database = os.getenv('DB_NAME'),
        user = os.getenv('DB_USER'),
        password = os.getenv('DB_PASSWORD'),
        host = os.getenv('DB_HOST', 'localhost'),
        port = 5432)

<%
// { "get", "/v1/categories/:categoryId" } => "get_v1_categories_category_id"
function generate_method_name(method, path) {
    const name = camel2snakeCase(path).replace(/\//g, '_').replace(/[^_a-z0-9]/g, '');
    return `${method}${name}`
}

// "INSERT INTO ... VALUES(:categoryId)" => "INSERT INTO ... VALUES(%(categoryId)s)"
// See: https://www.psycopg.org/docs/usage.html#passing-parameters-to-sql-queries
function convertToPsycopgNamedArguments(sql) {
    return sql.replace(/(?<!:):([_a-zA-Z]+)/g, '%($1)s')
}

// "/categories/:categoryId" => "/categories/{categoryId}"
function convertToFastApiPath(path) {
    return path.replace(/:([_a-zA-Z]+)/g, '{$1}')
}


endpoints.forEach(function(endpoint) {
    const path = convertToFastApiPath(endpoint.path)
    const methodArgs = extractParamsFromPath(endpoint.path)
    methodArgs.push('conn = Depends(db_connection)')

    endpoint.methods.forEach(function(method) {
        const hasGetOne = method.name === 'get'
        const hasGetMany = method.name === 'get_list'
        const pythonMethodName = generate_method_name(method.name, path)

        const queriesWithNames = []
        if (method.query) {
            queriesWithNames.push({ "result" : method.query })
        } else if (method.aggregated_queries) {
            for (const [key, value] of Object.entries(method.aggregated_queries)) {
                queriesWithNames.push({ [key]: value })
            }
        }

        const queries = []
        queriesWithNames.forEach(queryWithName => {
            for (const [name, query] of Object.entries(queryWithName)) {
                const sql = convertToPsycopgNamedArguments(formatQuery(query))
                const params = extractParamsFromQuery(query);
                const formattedParams = params.length > 0
                    // [ "p.categoryId" ] => [ '"categoryId": categoryId' ]
                    ? ', { ' + params.map(param => param.substring(2)).map(param => `"${param}": ${param}`).join(', ') + ' }'
                    : ''
                queries.push({ [name]: { sql : sql, formattedParams: formattedParams }})
            }
        })

        if (hasGetOne || hasGetMany) {
%>
@router.get('<%- path %>')
def <%- pythonMethodName %>(<%- methodArgs.join(', ') %>):
    try:
        with conn:
<%          if (hasGetOne) {
                if (queries.length > 1) { /* we can omit cursor_factory but in this case we might get an unused import  */-%>
            with conn.cursor(cursor_factory = psycopg2.extras.DictCursor) as cur:
                result = {}
<%                  queries.forEach(queryInfo => {
                        for (const [name, query] of Object.entries(queryInfo)) {
-%>
                cur.execute("<%- query.sql %>"<%- query.formattedParams %>)
                result['<%- name %>'] = cur.fetchone()[0]
<%                      }
                    })
-%>
                return result
<%
                } else {
                    const query = queries[0].result
-%>
            with conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor) as cur:
                cur.execute("<%- query.sql %>"<%- query.formattedParams %>)
                result = cur.fetchone()
                if result is None:
                    raise HTTPException(status_code=404)
                return result
<%              }
            } else {
                const query = queries[0].result
-%>
            with conn.cursor(cursor_factory = psycopg2.extras.RealDictCursor) as cur:
                cur.execute("<%- query.sql %>"<%- query.formattedParams %>)
                return cur.fetchall()
<%
            }
-%>
    finally:
        conn.close()
<%
        }
        if (method.name === 'post') {
%>
@router.post('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
        if (method.name === 'put') {
%>
@router.put('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
        if (method.name === 'delete') {
%>
@router.delete('<%- path %>')
def <%- pythonMethodName %>():
    pass
<%

        }
    })
})
%>
